{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louha\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport DurationButtons from \"./DurationButtons\";\nimport PlayPauseButtons from \"./PlayPauseButtons\";\nimport StopButton from \"./StopButton\";\nimport ProgressText from \"./ProgressText\";\nimport ProgressBar from \"./ProgressBar\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState, focusDuration, breakDuration) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n\n  if (prevState.label === \"Focusing\") {\n    const timeElapsed = focusDuration * 60 - timeRemaining;\n    prevState.percentComplete = timeElapsed / (focusDuration * 60) * 100;\n  } else {\n    const timeElapsed = breakDuration * 60 - timeRemaining;\n    prevState.percentComplete = timeElapsed / (breakDuration * 60) * 100;\n  }\n\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: breakDuration,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: focusDuration,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // Initial session state:\n\n  const initialSessionState = {\n    label: null,\n    duration: null,\n    timeRemaining: null,\n    percentComplete: null\n  }; // Declaring the single-state session variable\n\n  const [session, setSession] = useState(initialSessionState); // The initial Focus Duration timer starts at 25 minutes\n\n  const [focusDuration, setFocusDuration] = useState(25); // The initil Break Duration timer starts at 5 minutes\n\n  const [breakDuration, setBreakDuration] = useState(5); // Disable state for focusDuration buttons\n\n  const [disableDurationButtons, setDisableDurationButtons] = useState(false); // The disabled state of the stop button\n\n  const [disableStopButton, setDisableStopButton] = useState(true); // Declaring state variable that will be used to hide the progress text and bar\n\n  const [activeSessionStyle, setActiveSessionStyle] = useState(null); // PAUSED text appears after pressing the pause button\n\n  const [paused, setPaused] = useState(\"none\");\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick(session, focusDuration, breakDuration));\n  }, // REMEMBER TO CHANGE THIS BACK TO 1000\n  isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  // function playPause() {\n  //   // Disable FocusDuration buttons upon pressing play\n  //   setDisableDurationButtons(true);\n  //   // Enable the stop button upon pressing play\n  //   setDisableStopButton(false);\n  //   // Display active session div upon pressing play\n  //   setActiveSessionStyle(\"block\");\n  //   setIsTimerRunning((prevState) => {\n  //     // displaying the PAUSED text when the pause button has been pressed\n  //     if (prevState) {\n  //       setPaused(\"block\");\n  //     } else {\n  //       setPaused(\"none\");\n  //     }\n  //     const nextState = !prevState;\n  //     if (nextState) {\n  //       setSession((prevStateSession) => {\n  //         // If the timer is starting and the previous session is null,\n  //         // start a focusing session.\n  //         if (prevStateSession.label === null) {\n  //           return {\n  //             label: \"Focusing\",\n  //             duration: focusDuration,\n  //             timeRemaining: focusDuration * 60,\n  //             percentComplete: 0,\n  //           };\n  //         }\n  //         return prevStateSession;\n  //       });\n  //     }\n  //     return nextState;\n  //   });\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DurationButtons, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    disableDurationButtons: disableDurationButtons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PlayPauseButtons, {\n    setDisableDurationButtons: setDisableDurationButtons,\n    setDisableStopButton: setDisableStopButton,\n    setActiveSessionStyle: setActiveSessionStyle,\n    setIsTimerRunning: setIsTimerRunning,\n    isTimerRunning: isTimerRunning,\n    setPaused: setPaused,\n    setSession: setSession,\n    focusDuration: focusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StopButton, {\n    setIsTimerRunning: setIsTimerRunning,\n    setSession: setSession,\n    setFocusDuration: setFocusDuration,\n    setBreakDuration: setBreakDuration,\n    setDisableDurationButtons: setDisableDurationButtons,\n    setDisableStopButton: setDisableStopButton,\n    setActiveSessionStyle: setActiveSessionStyle,\n    setPaused: setPaused,\n    disableStopButton: disableStopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ProgressText, {\n    activeSessionStyle: activeSessionStyle,\n    session: session,\n    paused: paused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    activeSessionStyle: activeSessionStyle,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/louha/Thinkful/qualified-challenges/Project_Pomodoro_Timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","DurationButtons","PlayPauseButtons","StopButton","ProgressText","ProgressBar","nextTick","prevState","focusDuration","breakDuration","timeRemaining","Math","max","label","timeElapsed","percentComplete","nextSession","currentSession","duration","Pomodoro","isTimerRunning","setIsTimerRunning","initialSessionState","session","setSession","setFocusDuration","setBreakDuration","disableDurationButtons","setDisableDurationButtons","disableStopButton","setDisableStopButton","activeSessionStyle","setActiveSessionStyle","paused","setPaused","Audio","play"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\n\nimport DurationButtons from \"./DurationButtons\";\nimport PlayPauseButtons from \"./PlayPauseButtons\";\nimport StopButton from \"./StopButton\";\nimport ProgressText from \"./ProgressText\";\nimport ProgressBar from \"./ProgressBar\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState, focusDuration, breakDuration) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  if (prevState.label === \"Focusing\") {\n    const timeElapsed = (focusDuration * 60) - timeRemaining;\n    prevState.percentComplete = (timeElapsed / (focusDuration * 60)) * 100;\n  } else {\n    const timeElapsed = (breakDuration * 60) - timeRemaining;\n    prevState.percentComplete = (timeElapsed / (breakDuration * 60)) * 100;\n  }\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: breakDuration,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: focusDuration,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  // Initial session state:\n  const initialSessionState = {\n    label: null, \n    duration: null, \n    timeRemaining: null, \n    percentComplete: null \n  }\n\n  // Declaring the single-state session variable\n  const [session, setSession] = useState(initialSessionState);\n\n  // The initial Focus Duration timer starts at 25 minutes\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  // The initil Break Duration timer starts at 5 minutes\n  const [breakDuration, setBreakDuration] = useState(5);\n  \n  // Disable state for focusDuration buttons\n  const [disableDurationButtons, setDisableDurationButtons] = useState(false);\n\n  // The disabled state of the stop button\n  const [disableStopButton, setDisableStopButton] = useState(true);\n\n  // Declaring state variable that will be used to hide the progress text and bar\n  const [activeSessionStyle, setActiveSessionStyle] = useState(null);\n\n  // PAUSED text appears after pressing the pause button\n  const [paused, setPaused] = useState(\"none\");\n\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      \n      return setSession(nextTick(session, focusDuration, breakDuration));\n    },\n    // REMEMBER TO CHANGE THIS BACK TO 1000\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  // function playPause() {\n  //   // Disable FocusDuration buttons upon pressing play\n  //   setDisableDurationButtons(true);\n  //   // Enable the stop button upon pressing play\n  //   setDisableStopButton(false);\n  //   // Display active session div upon pressing play\n  //   setActiveSessionStyle(\"block\");\n\n  //   setIsTimerRunning((prevState) => {\n  //     // displaying the PAUSED text when the pause button has been pressed\n  //     if (prevState) {\n  //       setPaused(\"block\");\n  //     } else {\n  //       setPaused(\"none\");\n  //     }\n      \n  //     const nextState = !prevState;\n  //     if (nextState) {\n  //       setSession((prevStateSession) => {\n  //         // If the timer is starting and the previous session is null,\n  //         // start a focusing session.\n  //         if (prevStateSession.label === null) {\n  //           return {\n  //             label: \"Focusing\",\n  //             duration: focusDuration,\n  //             timeRemaining: focusDuration * 60,\n  //             percentComplete: 0,\n  //           };\n  //         }\n  //         return prevStateSession;\n  //       });\n  //     }\n  //     return nextState;\n  //   });\n  // }\n\n\n  return (\n    <div className=\"pomodoro\">\n      <DurationButtons\n        focusDuration={focusDuration} \n        setFocusDuration={setFocusDuration}\n        breakDuration={breakDuration} \n        setBreakDuration={setBreakDuration}\n        disableDurationButtons={disableDurationButtons} \n      />\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <PlayPauseButtons\n              setDisableDurationButtons={setDisableDurationButtons}\n              setDisableStopButton={setDisableStopButton}\n              setActiveSessionStyle={setActiveSessionStyle}\n              setIsTimerRunning={setIsTimerRunning}\n              isTimerRunning={isTimerRunning}\n              setPaused={setPaused}\n              setSession={setSession}\n              focusDuration={focusDuration}\n            />\n            {/* TODO: Implement stopping the current focus or break session. */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <StopButton\n              setIsTimerRunning={setIsTimerRunning}\n              setSession={setSession}\n              setFocusDuration={setFocusDuration}\n              setBreakDuration={setBreakDuration}\n              setDisableDurationButtons={setDisableDurationButtons}\n              setDisableStopButton={setDisableStopButton}\n              setActiveSessionStyle={setActiveSessionStyle}\n              setPaused={setPaused}\n              disableStopButton={disableStopButton}\n            />\n          </div>\n        </div>\n      </div>\n      <div>\n        <ProgressText \n          activeSessionStyle={activeSessionStyle}\n          session={session}\n          paused={paused}\n        />\n        <ProgressBar\n          activeSessionStyle={activeSessionStyle}\n          session={session}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}