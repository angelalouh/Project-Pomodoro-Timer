{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louha\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport DurationButtons from \"./DurationButtons\";\nimport PlayPauseButtons from \"./PlayPauseButtons\";\nimport StopButton from \"./StopButton\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState, focusDuration, breakDuration) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n\n  if (prevState.label === \"Focusing\") {\n    const timeElapsed = focusDuration * 60 - timeRemaining;\n    prevState.percentComplete = timeElapsed / (focusDuration * 60) * 100;\n  } else {\n    const timeElapsed = breakDuration * 60 - timeRemaining;\n    prevState.percentComplete = timeElapsed / (breakDuration * 60) * 100;\n  }\n\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: breakDuration,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: focusDuration,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState({\n    label: null,\n    duration: null,\n    timeRemaining: null,\n    percentComplete: null\n  }); // ToDo: Allow the user to adjust the focus and break duration.\n  // The current Focus Duration timer starts at 25\n\n  const [focusDuration, setFocusDuration] = useState(25); // The current Break Duration timer starts at 5\n\n  const [breakDuration, setBreakDuration] = useState(5); // Disable state for focusDuration buttons\n\n  const [disableDurationButtons, setDisableDurationButtons] = useState(false); // The disabled state of the stop button\n\n  const [disableStopButton, setDisableStopButton] = useState(true);\n  const [activeSessionStyle, setActiveSessionStyle] = useState(\"none\"); // PAUSED text appears after pressing the pause button\n\n  const [paused, setPaused] = useState(\"none\"); // // Function to handle decreasing the focus or break duration time\n  // const handleMinusFocusDurationClick = () => {\n  //   setFocusDuration((currentFocusDuration) => {\n  //     return Math.max(5, (currentFocusDuration - 5 ));\n  //   });\n  // }\n  // const handleMinusBreakDurationClick = () => {\n  //   setBreakDuration((currentBreakDuration) => {\n  //     return Math.max(1, (currentBreakDuration - 1 ));\n  //   });\n  // }\n  // // Function to handle increasing the focus or break duration time\n  // const handlePlusFocusDurationClick = () => {\n  //   setFocusDuration((currentFocusDuration) => {\n  //     return Math.min(60, (currentFocusDuration + 5 ));\n  //   });\n  // }\n  // const handlePlusBreakDurationClick = () => {\n  //   setBreakDuration((currentBreakDuration) => {\n  //     return Math.min(15, (currentBreakDuration + 1 ));\n  //   });\n  // }\n\n  const handleStopButtonClick = () => {\n    setIsTimerRunning(false);\n    setSession({\n      label: null,\n      duration: null,\n      timeRemaining: null,\n      percentComplete: null\n    });\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setDisableDurationButtons(false);\n    setDisableStopButton(true);\n    setActiveSessionStyle(\"none\");\n    setPaused(\"none\");\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    console.log(session.percentComplete);\n    return setSession(nextTick(session, focusDuration, breakDuration));\n  }, // REMEMBER TO CHANGE THIS BACK TO 1000\n  isTimerRunning ? 100 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    // Disable FocusDuration buttons upon pressing play\n    setDisableDurationButtons(true); // Enable the stop button upon pressing play\n\n    setDisableStopButton(false); // Display active session div upon pressing play\n\n    setActiveSessionStyle(\"block\");\n    setIsTimerRunning(prevState => {\n      // displaying the PAUSED text when the pause button has been pressed\n      if (prevState) {\n        setPaused(\"block\");\n      } else {\n        setPaused(\"none\");\n      }\n\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession.label === null) {\n            return {\n              label: \"Focusing\",\n              duration: focusDuration,\n              timeRemaining: focusDuration * 60,\n              percentComplete: 0\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DurationButtons, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    disableDurationButtons: disableDurationButtons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PlayPauseButtons, {\n    setDisableDurationButtons: setDisableDurationButtons,\n    setDisableStopButton: setDisableStopButton,\n    setActiveSessionStyle: setActiveSessionStyle,\n    setIsTimerRunning: setIsTimerRunning,\n    isTimerRunning: isTimerRunning,\n    setPaused: setPaused,\n    setSession: setSession,\n    focusDuration: focusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StopButton // setIsTimerRunning={setIsTimerRunning}\n  // setSession={setSession}\n  // setFocusDuration={setFocusDuration}\n  // setBreakDuration={setBreakDuration}\n  // setDisableDurationButtons={setDisableDurationButtons}\n  // setDisableStopButton={setDisableStopButton}\n  // setActiveSessionStyle={setActiveSessionStyle}\n  // setPaused={setPaused}\n  , {\n    handleStopButtonClick: handleStopButtonClick,\n    disableStopButton: disableStopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    style: {\n      display: activeSessionStyle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }\n  }, session.label, \" for \", minutesToDuration(session.duration), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    style: {\n      display: activeSessionStyle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, secondsToDuration(session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      display: paused\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\",\n      display: activeSessionStyle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": session.percentComplete // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${session.percentComplete}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/louha/Thinkful/qualified-challenges/Project_Pomodoro_Timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","minutesToDuration","secondsToDuration","DurationButtons","PlayPauseButtons","StopButton","nextTick","prevState","focusDuration","breakDuration","timeRemaining","Math","max","label","timeElapsed","percentComplete","nextSession","currentSession","duration","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","disableDurationButtons","setDisableDurationButtons","disableStopButton","setDisableStopButton","activeSessionStyle","setActiveSessionStyle","paused","setPaused","handleStopButtonClick","Audio","play","console","log","playPause","nextState","prevStateSession","display","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\";\n\nimport DurationButtons from \"./DurationButtons\";\nimport PlayPauseButtons from \"./PlayPauseButtons\";\nimport StopButton from \"./StopButton\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState, focusDuration, breakDuration) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  if (prevState.label === \"Focusing\") {\n    const timeElapsed = (focusDuration * 60) - timeRemaining;\n    prevState.percentComplete = (timeElapsed / (focusDuration * 60)) * 100;\n  } else {\n    const timeElapsed = (breakDuration * 60) - timeRemaining;\n    prevState.percentComplete = (timeElapsed / (breakDuration * 60)) * 100;\n  }\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: breakDuration,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: focusDuration,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState({ label: null, duration: null, timeRemaining: null, percentComplete: null });\n\n// ToDo: Allow the user to adjust the focus and break duration.\n  // The current Focus Duration timer starts at 25\n  const [focusDuration, setFocusDuration] = useState(25);\n  // The current Break Duration timer starts at 5\n  const [breakDuration, setBreakDuration] = useState(5);\n  // Disable state for focusDuration buttons\n  const [disableDurationButtons, setDisableDurationButtons] = useState(false);\n\n  // The disabled state of the stop button\n  const [disableStopButton, setDisableStopButton] = useState(true);\n\n  const [activeSessionStyle, setActiveSessionStyle] = useState(\"none\");\n\n  // PAUSED text appears after pressing the pause button\n  const [paused, setPaused] = useState(\"none\");\n\n  // // Function to handle decreasing the focus or break duration time\n  // const handleMinusFocusDurationClick = () => {\n  //   setFocusDuration((currentFocusDuration) => {\n  //     return Math.max(5, (currentFocusDuration - 5 ));\n  //   });\n  // }\n  \n  // const handleMinusBreakDurationClick = () => {\n  //   setBreakDuration((currentBreakDuration) => {\n  //     return Math.max(1, (currentBreakDuration - 1 ));\n  //   });\n  // }\n\n  // // Function to handle increasing the focus or break duration time\n  // const handlePlusFocusDurationClick = () => {\n  //   setFocusDuration((currentFocusDuration) => {\n  //     return Math.min(60, (currentFocusDuration + 5 ));\n  //   });\n  // }\n\n  // const handlePlusBreakDurationClick = () => {\n  //   setBreakDuration((currentBreakDuration) => {\n  //     return Math.min(15, (currentBreakDuration + 1 ));\n  //   });\n  // }\n\n  const handleStopButtonClick = () => {\n    setIsTimerRunning(false);\n    setSession({\n      label: null,\n      duration: null, \n      timeRemaining: null,\n      percentComplete: null, \n    });\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setDisableDurationButtons(false);\n    setDisableStopButton(true);\n    setActiveSessionStyle(\"none\");\n    setPaused(\"none\");\n  }\n\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      console.log(session.percentComplete);\n      return setSession(nextTick(session, focusDuration, breakDuration));\n    },\n    // REMEMBER TO CHANGE THIS BACK TO 1000\n    isTimerRunning ? 100 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    // Disable FocusDuration buttons upon pressing play\n    setDisableDurationButtons(true);\n    // Enable the stop button upon pressing play\n    setDisableStopButton(false);\n    // Display active session div upon pressing play\n    setActiveSessionStyle(\"block\");\n\n    setIsTimerRunning((prevState) => {\n      // displaying the PAUSED text when the pause button has been pressed\n      if (prevState) {\n        setPaused(\"block\");\n      } else {\n        setPaused(\"none\");\n      }\n      \n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession.label === null) {\n            return {\n              label: \"Focusing\",\n              duration: focusDuration,\n              timeRemaining: focusDuration * 60,\n              percentComplete: 0,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <DurationButtons\n        focusDuration={focusDuration} \n        setFocusDuration={setFocusDuration}\n        breakDuration={breakDuration} \n        setBreakDuration={setBreakDuration}\n        disableDurationButtons={disableDurationButtons} \n      />\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <PlayPauseButtons\n              setDisableDurationButtons={setDisableDurationButtons}\n              setDisableStopButton={setDisableStopButton}\n              setActiveSessionStyle={setActiveSessionStyle}\n              setIsTimerRunning={setIsTimerRunning}\n              isTimerRunning={isTimerRunning}\n              setPaused={setPaused}\n              setSession={setSession}\n              focusDuration={focusDuration}\n            />\n            {/* TODO: Implement stopping the current focus or break session. */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <StopButton\n              // setIsTimerRunning={setIsTimerRunning}\n              // setSession={setSession}\n              // setFocusDuration={setFocusDuration}\n              // setBreakDuration={setBreakDuration}\n              // setDisableDurationButtons={setDisableDurationButtons}\n              // setDisableStopButton={setDisableStopButton}\n              // setActiveSessionStyle={setActiveSessionStyle}\n              // setPaused={setPaused}\n              handleStopButtonClick={handleStopButtonClick}\n              disableStopButton={disableStopButton}\n            />\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\" style={{display: activeSessionStyle}}>\n              {session.label} for {minutesToDuration(session.duration)} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\" style={{display: activeSessionStyle}}>\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <h2 style={{display: paused}}>\n              PAUSED\n            </h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\", display: activeSessionStyle }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={session.percentComplete} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${session.percentComplete}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}