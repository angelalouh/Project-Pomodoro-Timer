{"ast":null,"code":"import React from 'react';\n/**\r\n * Update the session state with new state after each tick of the interval.\r\n * @param prevState\r\n *  the previous session state\r\n * @returns\r\n *  new session state with timing information updated.\r\n */\n\nfunction nextTick({\n  prevState\n}) {\n  let timeElapsed; // needs access to focusDuration as a prop!\n\n  const focusDuration = 25 * 60;\n  const breakDuration = 5 * 60;\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n\n  if (prevState.label === \"Focusing\") {\n    timeElapsed = focusDuration - timeRemaining;\n  } else {\n    timeElapsed = breakDuration - timeRemaining;\n  }\n\n  return { ...prevState,\n    timeRemaining,\n    timeElapsed\n  };\n}\n\nexport default nextTick;","map":{"version":3,"sources":["C:/Users/louha/Thinkful/qualified-challenges/Project_Pomodoro_Timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/nextTick.js"],"names":["React","nextTick","prevState","timeElapsed","focusDuration","breakDuration","timeRemaining","Math","max","label"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAiC;AAC9B,MAAIC,WAAJ,CAD8B,CAE9B;;AACA,QAAMC,aAAa,GAAG,KAAK,EAA3B;AACA,QAAMC,aAAa,GAAG,IAAI,EAA1B;AACA,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYN,SAAS,CAACI,aAAV,GAA0B,CAAtC,CAAtB;;AACA,MAAIJ,SAAS,CAACO,KAAV,KAAoB,UAAxB,EAAoC;AAClCN,IAAAA,WAAW,GAAGC,aAAa,GAAGE,aAA9B;AACD,GAFD,MAEO;AACLH,IAAAA,WAAW,GAAGE,aAAa,GAAGC,aAA9B;AACD;;AACD,SAAO,EACL,GAAGJ,SADE;AAELI,IAAAA,aAFK;AAGLH,IAAAA;AAHK,GAAP;AAKD;;AAEH,eAAeF,QAAf","sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Update the session state with new state after each tick of the interval.\r\n * @param prevState\r\n *  the previous session state\r\n * @returns\r\n *  new session state with timing information updated.\r\n */\r\n function nextTick({ prevState }) {\r\n    let timeElapsed;\r\n    // needs access to focusDuration as a prop!\r\n    const focusDuration = 25 * 60;\r\n    const breakDuration = 5 * 60;\r\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n    if (prevState.label === \"Focusing\") {\r\n      timeElapsed = focusDuration - timeRemaining;\r\n    } else {\r\n      timeElapsed = breakDuration - timeRemaining;\r\n    }\r\n    return {\r\n      ...prevState,\r\n      timeRemaining,\r\n      timeElapsed,\r\n    };\r\n  }\r\n\r\nexport default nextTick;"]},"metadata":{},"sourceType":"module"}